# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FollowEntity {
  id: Float!
  followerId: String!
  followingId: String!
  followerUser: UserResponse!
  followingUser: UserResponse!
}

type UserResponse {
  id: String!
  username: String!
  name: String!
  email: String!
  image: String
  bio: String
  postCount: Float!
  followerCount: Float!
  followingCount: Float!
  followers: [FollowEntity!]
  following: [FollowEntity!]
}

type LoginResponse {
  token: String!
  user: UserResponse!
}

type Comments {
  id: String!
  userId: String!
  postId: String!
  content: String!
  user: UserResponse
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: Float!
  userId: String!
  content: String!
  images: [String!]!
  likes: Float!
  isLiked: Boolean!
  comments(page: Float!): [Comments!]!
  createdAt: DateTime!
  user: UserResponse
}

type LikeEntity {
  id: Float!
  userId: String!
  postId: String!
}

type CommentsEntity {
  id: Float!
  userId: String!
  postId: String!
  content: String!
}

type Group {
  id: Float!
  name: String!
  image: String!
  members: [GroupUsers!]!
  user: [UserResponse!]!
}

type GroupUsers {
  id: Float!
  groupId: Float!
  userId: String!
  role: Role!
  user: UserResponse!
}

enum Role {
  member
  admin
}

type Message {
  id: String!
  senderId: String!
  chatId: Float!
  groupId: Float!
  content: String!
  images: [String!]!
  sender: UserResponse
}

type Chat {
  id: String!
  userId: String!
  friendId: String!
  messages: [Message!]
  user: UserResponse
  friend: UserResponse
}

type Info {
  id: Float!
  user_id: String!
  name: String!
  username: String!
  image: String
}

type SingleChat {
  ChatInfo: Info!
  messages: [Message!]
}

type Query {
  search_users(query: String!): [UserResponse!]!
  user(userId: String!): UserResponse!
  Me: UserResponse!
  feed: [Post!]!
  getPost(postId: Float!): Post!
  find: LikeEntity!
  getChat(friendId: String!): SingleChat!
  getChats: [Chat!]!
  getGroups: [Group!]!
  group(groupId: Float!): Group!
}

type Mutation {
  register(input: RegisterInput!): String!
  verify(input: VerifyInput!): String!
  login(input: LoginInput!): LoginResponse!
  update_password(input: UpdatePasswordInput!): UserResponse!
  updateInfo(input: UserInfoInput, file: Upload): UserResponse!
  createPost(files: [Upload!], input: postInput!): Post!
  updatePost(postId: Float!, files: [Upload!], input: postInput): Post!
  deletePost(postId: Float!): String!
  follow(followingId: String!): FollowEntity!
  unFollow(followingId: String!): String!
  addComment(postId: Float!, content: String!): CommentsEntity!
  updateComment(commentId: Float!, content: String!): CommentsEntity!
  deleteComment(commentId: Float!): String!
  like(postId: Float!): Boolean!
  sendMessage(receiverId: String!, content: String!, files: [Upload!]): Message!
  sendGroupMessage(groupId: Float!, content: String!, files: [Upload!]): Message!
  addMemberSearch(groupId: Float!, query: String!): [UserResponse!]!
  addMember(groupId: Float!, userId: String!): UserResponse!
  addAdmin(groupId: Float!, memberId: String!): UserResponse!
  removeMember(groupId: Float!, memberId: String!): UserResponse!
  createGroup(name: String!, file: Upload!): Group!
}

input RegisterInput {
  username: String!
  name: String!
  email: String!
  password: String!
}

input VerifyInput {
  email: String!
  otp: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input UserInfoInput {
  name: String
  username: String
  bio: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input postInput {
  content: String
}

type Subscription {
  newMessage(chatId: Float!): Message!
  newGroupMessage(groupId: Float!): Message!
}